{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.10", "generated_at": "2025-09-05T23:03:02.402606Z", "invocation_id": "75c8f975-5ee6-4b1b-97e6-60a858145ddb", "invocation_started_at": "2025-09-05T23:02:49.168364Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.786367Z", "completed_at": "2025-09-05T23:03:01.798983Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.799701Z", "completed_at": "2025-09-05T23:03:01.799715Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01679682731628418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.stg_customers", "compiled": true, "compiled_code": "\n\nselect\n  cast(customer_id as string) as customer_id,\n  upper(trim(customer_country)) as customer_country\nfrom `manuel-demo-1392926998`.`raw`.`customers`", "relation_name": "`manuel-demo-1392926998`.`analytics`.`stg_customers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.795858Z", "completed_at": "2025-09-05T23:03:01.799370Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.800385Z", "completed_at": "2025-09-05T23:03:01.800394Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01694011688232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.stg_activity", "compiled": true, "compiled_code": "\n\nselect\n  cast(customer_id as string)          as customer_id,\n  cast(subscription_id as string)      as subscription_id,\n  safe.parse_date('%Y-%m-%d', trim(from_date)) as start_date,\n  safe.parse_date('%Y-%m-%d', nullif(trim(to_date), '')) as end_date\nfrom `manuel-demo-1392926998`.`raw`.`activity`", "relation_name": "`manuel-demo-1392926998`.`analytics`.`stg_activity`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.793589Z", "completed_at": "2025-09-05T23:03:01.800064Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.801398Z", "completed_at": "2025-09-05T23:03:01.801404Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018060922622680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.stg_acq_orders", "compiled": true, "compiled_code": "\n\nselect\n  cast(customer_id as string) as customer_id,\n  nullif(trim(taxonomy_business_category_group), '') as taxonomy_business_category_group\nfrom `manuel-demo-1392926998`.`raw`.`acq_orders`", "relation_name": "`manuel-demo-1392926998`.`analytics`.`stg_acq_orders`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.816482Z", "completed_at": "2025-09-05T23:03:01.818597Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.824352Z", "completed_at": "2025-09-05T23:03:01.824361Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020012617111206055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.manuel_demo.customers_snapshot", "compiled": true, "compiled_code": "\n\n\n\nselect\n  customer_id,\n  customer_country\nfrom `manuel-demo-1392926998`.`analytics`.`stg_customers`\n", "relation_name": "`manuel-demo-1392926998`.`snapshots`.`customers_snapshot`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.821578Z", "completed_at": "2025-09-05T23:03:01.831688Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.832424Z", "completed_at": "2025-09-05T23:03:01.832431Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027602672576904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_stg_customers_customer_id.e2cfb1f9aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `manuel-demo-1392926998`.`analytics`.`stg_customers`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.818909Z", "completed_at": "2025-09-05T23:03:01.832059Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.833039Z", "completed_at": "2025-09-05T23:03:01.833045Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.029155969619750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.dim_customer_country", "compiled": true, "compiled_code": "-- ========================================================================================\n-- MODEL: dim_customer_country\n-- PURPOSE:\n--   One row per customer with a stable country value chosen deterministically from\n--   stg_customers.\n--\n-- GRAIN:\n--   1 row per customer_id present in stg_customers.\n--\n-- OUTPUT COLUMNS:\n--   - customer_id\n--   - customer_country               -- alphabetically-first non-null value observed\n--\n-- INPUTS:\n--   - stg_customers(customer_id, customer_country)\n--\n-- BUSINESS LOGIC:\n--   - For each customer_id, pick the alphabetically-first non-null customer_country using\n--     ARRAY_AGG(... ORDER BY customer_country)[OFFSET(0)] IGNORE NULLS.\n--\n-- ASSUMPTIONS:\n--   - A customer may appear multiple times in stg_customers, for example if they change country;\n--\t   this model selects one stable representative value per customer_id.\n--   - customer_country may be NULL if no non-null values exist for that customer.\n--\n-- PERFORMANCE:\n--   - Small dimension; materialized as TABLE for stable downstream joins.\n--   - Single GROUP BY over stg_customers; no partitioning required.\n--\n-- DATA QUALITY:\n--   - Exactly one row per customer_id (enforced by GROUP BY).\n--   - customer_id is NOT NULL; customer_country may be NULL.\n-- ========================================================================================\n\n\n\n-- One row per customer with a stable country value\nselect\n  customer_id,\n  -- If a customer appears more than once, pick a stable representative\n  -- IF a timestamp exist, we can pick-up the latest\n  ARRAY_AGG(customer_country IGNORE NULLS\n            ORDER BY customer_country)[OFFSET(0)]\n  as customer_country\nfrom `manuel-demo-1392926998`.`analytics`.`stg_customers`\ngroup by customer_id", "relation_name": "`manuel-demo-1392926998`.`analytics`.`dim_customer_country`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.807395Z", "completed_at": "2025-09-05T23:03:01.832750Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.834308Z", "completed_at": "2025-09-05T23:03:01.834314Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03125309944152832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_stg_customers_customer_country.a0d00dae1b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_country\nfrom `manuel-demo-1392926998`.`analytics`.`stg_customers`\nwhere customer_country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.826536Z", "completed_at": "2025-09-05T23:03:01.834034Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.835545Z", "completed_at": "2025-09-05T23:03:01.835551Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011346817016601562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.unique_stg_customers_customer_id.c7614daada", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `manuel-demo-1392926998`.`analytics`.`stg_customers`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.839657Z", "completed_at": "2025-09-05T23:03:01.856161Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.856615Z", "completed_at": "2025-09-05T23:03:01.856622Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020392894744873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_stg_activity_end_date___start_date.d422a20bd7", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`stg_activity`\n\nwhere not(end_date >= start_date)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.846107Z", "completed_at": "2025-09-05T23:03:01.861346Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.862214Z", "completed_at": "2025-09-05T23:03:01.862222Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02530503273010254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_stg_activity_start_date___CURRENT_DATE_.ab9931ea29", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`stg_activity`\n\nwhere not(start_date <= CURRENT_DATE())\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.852979Z", "completed_at": "2025-09-05T23:03:01.861833Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.862835Z", "completed_at": "2025-09-05T23:03:01.862840Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01883530616760254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_stg_activity_end_date.ab2cfe6875", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_date\nfrom `manuel-demo-1392926998`.`analytics`.`stg_activity`\nwhere end_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.850145Z", "completed_at": "2025-09-05T23:03:01.862529Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.863794Z", "completed_at": "2025-09-05T23:03:01.863800Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026419878005981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_stg_activity_customer_id.5f86b4ba91", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `manuel-demo-1392926998`.`analytics`.`stg_activity`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.858394Z", "completed_at": "2025-09-05T23:03:01.864660Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.866220Z", "completed_at": "2025-09-05T23:03:01.866226Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009802103042602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_stg_activity_start_date.137065e8fb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_date\nfrom `manuel-demo-1392926998`.`analytics`.`stg_activity`\nwhere start_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.884299Z", "completed_at": "2025-09-05T23:03:01.886116Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.886464Z", "completed_at": "2025-09-05T23:03:01.886471Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0063822269439697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.manuel_demo.acq_orders_snapshot", "compiled": true, "compiled_code": "\n\n\n\nselect\n  customer_id,\n  taxonomy_business_category_group\nfrom `manuel-demo-1392926998`.`analytics`.`stg_acq_orders`\n", "relation_name": "`manuel-demo-1392926998`.`snapshots`.`acq_orders_snapshot`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.874616Z", "completed_at": "2025-09-05T23:03:01.888030Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.889309Z", "completed_at": "2025-09-05T23:03:01.889315Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02641916275024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.relationships_stg_activity_customer_id__customer_id__ref_stg_customers_.4cee0d96ac", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from `manuel-demo-1392926998`.`analytics`.`stg_activity`\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from `manuel-demo-1392926998`.`analytics`.`stg_customers`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.881067Z", "completed_at": "2025-09-05T23:03:01.888372Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.889604Z", "completed_at": "2025-09-05T23:03:01.889609Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025961875915527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.dim_acquisition_taxonomy", "compiled": true, "compiled_code": "-- ========================================================================================\n-- MODEL: dim_acquisition_taxonomy\n-- PURPOSE:\n--   One row per customer with a deterministic acquisition taxonomy assignment.\n--   Picks the alphabetically-first non-null taxonomy value observed in stg_acq_orders.\n--\n-- GRAIN:\n--   1 row per customer_id present in stg_acq_orders.\n--\n-- OUTPUT COLUMNS:\n--   - customer_id\n--   - taxonomy_business_category_group\n--\n-- INPUTS:\n--   - stg_acq_orders(customer_id, taxonomy_business_category_group)\n--\n-- BUSINESS LOGIC:\n--   - For each customer_id, select once taxonomy_business_category_group. This is a\n--     stable, deterministic choice when there are multiple categories per customer.\n--\t - If a timestamp becomes available, it could be used to select a different taxonomy.\n--\n-- ASSUMPTIONS:\n--\t - We only have the aqusition taxonomy, which means it will be fixed throught the custonmer's\n--\t   lifecycle even if they change to a different toxonomy later.\n--   - Only customers that appear in stg_acq_orders are included (no outer join to all customers).\n--   - taxonomy_business_category_group may be NULL if all observed values are NULL.\n--\n-- PERFORMANCE:\n--   - Small dimension; materialized as TABLE for stable downstream joins.\n--   - No partitioning; GROUP BY on stg_acq_orders only.\n--\n-- DATA QUALITY:\n--   - Exactly one row per customer_id (as produced by GROUP BY).\n--   - customer_id is NOT NULL; taxonomy_business_category_group may be NULL.\n-- ========================================================================================\n\n\n\n-- One row per customer with a taxonomy assignment\n-- If later we have order timestamps, switch to \u201clatest taxonomy\u201d logic,\n-- or better match activity with active subscription with relevant toxonomy.\nselect\n  customer_id,\n  ARRAY_AGG(taxonomy_business_category_group IGNORE NULLS\n            ORDER BY taxonomy_business_category_group)[OFFSET(0)]\n    as taxonomy_business_category_group\nfrom `manuel-demo-1392926998`.`analytics`.`stg_acq_orders`\ngroup by customer_id", "relation_name": "`manuel-demo-1392926998`.`analytics`.`dim_acquisition_taxonomy`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.869243Z", "completed_at": "2025-09-05T23:03:01.888677Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.889889Z", "completed_at": "2025-09-05T23:03:01.889894Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02848029136657715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_stg_activity_subscription_id.9d02e32ae1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom `manuel-demo-1392926998`.`analytics`.`stg_activity`\nwhere subscription_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.890162Z", "completed_at": "2025-09-05T23:03:01.897362Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.898509Z", "completed_at": "2025-09-05T23:03:01.898514Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01798534393310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_stg_acq_orders_customer_id.8821170a54", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `manuel-demo-1392926998`.`analytics`.`stg_acq_orders`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.901723Z", "completed_at": "2025-09-05T23:03:01.913061Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.913529Z", "completed_at": "2025-09-05T23:03:01.913536Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017448902130126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.relationships_stg_acq_orders_customer_id__customer_id__ref_stg_customers_.a62bf73397", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from `manuel-demo-1392926998`.`analytics`.`stg_acq_orders`\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from `manuel-demo-1392926998`.`analytics`.`stg_customers`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.906240Z", "completed_at": "2025-09-05T23:03:01.913872Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.915304Z", "completed_at": "2025-09-05T23:03:01.915310Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01906108856201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_dim_customer_country_customer_country.14b0e67c16", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_country\nfrom `manuel-demo-1392926998`.`analytics`.`dim_customer_country`\nwhere customer_country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.899060Z", "completed_at": "2025-09-05T23:03:01.914918Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.916264Z", "completed_at": "2025-09-05T23:03:01.916270Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021229028701782227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_stg_acq_orders_taxonomy_business_category_group.2bd2dd5b7a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect taxonomy_business_category_group\nfrom `manuel-demo-1392926998`.`analytics`.`stg_acq_orders`\nwhere taxonomy_business_category_group is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.910157Z", "completed_at": "2025-09-05T23:03:01.915596Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.917144Z", "completed_at": "2025-09-05T23:03:01.917149Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00934457778930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_dim_customer_country_customer_id.012841c2e4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `manuel-demo-1392926998`.`analytics`.`dim_customer_country`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.924734Z", "completed_at": "2025-09-05T23:03:01.941158Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.944803Z", "completed_at": "2025-09-05T23:03:01.944812Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.026079416275024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.dim_customer_cohort", "compiled": true, "compiled_code": "-- ========================================================================================\n-- MODEL: dim_customer_cohort\n-- PURPOSE:\n--   One row per customer capturing their first-ever active date (cohort_date) and its\n--   week bucket (cohort_week), month bucket (cohort_month), plus stable slicing attributes\n--\t (country, taxonomy).\n--\n-- GRAIN:\n--   1 row per customer_id.\n--\n-- OUTPUT COLUMNS:\n--   - customer_id\n--   - cohort_month                         -- DATE_TRUNC(cohort_date, MONTH)\n--   - cohort_date                          -- MIN(start_date) from activity windows\n--   - customer_country                     -- deterministic pick from dim_customer_country\n--   - taxonomy_business_category_group     -- deterministic pick from dim_acquisition_taxonomy\n--\n-- INPUTS:\n--   - stg_activity(customer_id, start_date)\n--   - dim_customer_country(customer_id, customer_country)\n--   - dim_acquisition_taxonomy(customer_id, taxonomy_business_category_group)\n--\n-- BUSINESS LOGIC:\n--   - Compute cohort_date as the earliest observed start_date per customer_id.\n--   - Derive cohort_month = DATE_TRUNC(cohort_date, MONTH).\n--\n-- ASSUMPTIONS:\n--   - start_date is inclusive and present for first-activity determination.\n--   - Customers may have multiple customer_country/taxonomy rows; model resolves to\n--     a single, stable value per customer.\n--\n-- PERFORMANCE:\n--   - Small dimensional table; single pass aggregations over staging inputs.\n--   - Materialized as TABLE for stable downstream joins; partitioned by cohort_month.\n--\n-- DATA QUALITY:\n--   - Exactly one row per customer_id.\n--   - cohort_date <= DATE(CURRENT_DATE())\n--\t - cohort_month = DATE_TRUNC(cohort_date, MONTH).\n-- ========================================================================================\n\n\n\n/* 1) Keep only valid activity rows (defensive filtering).\n      If business allows future-dated activations, relax the CURRENT_DATE() predicate. */\nwith valid_activity as (\n  select\n    customer_id,\n    start_date\n  from `manuel-demo-1392926998`.`analytics`.`stg_activity`\n  where start_date is not null\n    and start_date <= DATE(CURRENT_DATE())\n),\n\n/* 2) First time a customer was active = cohort_date. */\nfirst_seen as (\n  select\n    customer_id,\n    min(start_date) as cohort_date\n  from valid_activity\n  group by customer_id\n)\n\n/* 3) Final dimensional row: 1 row per customer_id with cohort & descriptors. */\nselect\n  fs.customer_id,\n  date_trunc(fs.cohort_date, month) as cohort_month,\n  date_trunc(fs.cohort_date, week) as cohort_week_start,\n  fs.cohort_date,\n  ca.customer_country,\n  tc.taxonomy_business_category_group\nfrom first_seen fs\nleft join `manuel-demo-1392926998`.`analytics`.`dim_customer_country`  ca using (customer_id)\nleft join `manuel-demo-1392926998`.`analytics`.`dim_acquisition_taxonomy` tc using (customer_id)", "relation_name": "`manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.920421Z", "completed_at": "2025-09-05T23:03:01.944338Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.945322Z", "completed_at": "2025-09-05T23:03:01.945329Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029330730438232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.unique_dim_customer_country_customer_id.2790cc1e6f", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `manuel-demo-1392926998`.`analytics`.`dim_customer_country`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.928997Z", "completed_at": "2025-09-05T23:03:01.946334Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.947510Z", "completed_at": "2025-09-05T23:03:01.947516Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.026206493377685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.fct_customer_active_daily", "compiled": true, "compiled_code": "-- ========================================================================================\n-- MODEL: fct_customer_active_daily\n-- PURPOSE:\n--   Subscription-level daily activity fact. Emits one row per (customer_id, \n--   activity_date) with a binary is_active=1 for each active day, plus stable slicing dims.\n--\n-- GRAIN:\n--   1 row per (customer_id,  activity_date,customer_country,\n--\t taxonomy_business_category_group).\n--\n-- OUTPUT COLUMNS:\n--   - activity_date\n--   - customer_id\n--   - is_active                           -- always 1 when a row exists for that day\n--   - customer_country\n--   - taxonomy_business_category_group\n--   - created_at\n--   - last_updated_at\n--\n-- INPUTS:\n--   - stg_activity(customer_id, subscription_id, start_date, end_date)\n--   - dim_customer_country(customer_id \u2192 customer_country)\n--   - dim_acquisition_taxonomy(customer_id \u2192 taxonomy_business_category_group)\n--\n-- BUSINESS LOGIC:\n--   - Expand each window to days with GENERATE_DATE_ARRAY; on incremental runs, bound\n--     the generated dates to the last 31 days.\n--   - Join 1:1 dims AFTER explosion to avoid carrying dim columns through the UNNEST.\n--   - Preserve created_at during insert_overwrite for existing rows in the incremental horizon.\n--\n-- ASSUMPTIONS:\n--   - start_date <= end_date (enforced upstream).\n--\n-- PERFORMANCE:\n--   - Partition: activity_date. Cluster: customer_id,  customer_country,\n--     taxonomy_business_category_group.\n--   - Incremental insert_overwrite on (customer_id,  activity_date).\n--\t - A retention period of 9999 days is added to avoid uncontroled growth; however, number\n--     should be configured for reasonable retention in a production environment.\n--\n-- DATA QUALITY:\n--   - Uniqueness at the declared grain.\n--   - Non-null keys/dates; is_active \u2208 {1}; timestamps populated.\n-- ========================================================================================\n\n\n\nwith win as (\n  -- Cap open-ended intervals at date(CURRENT_DATE()); restrict to windows that intersect the horizon\n  select \n    a.customer_id,\n    a.start_date,\n    coalesce(a.end_date, DATE(CURRENT_DATE())) as end_date\n  from `manuel-demo-1392926998`.`analytics`.`stg_activity` a\n  where a.start_date is not null\n    and a.start_date <= coalesce(a.end_date, DATE(CURRENT_DATE()))\n    \n      and coalesce(a.end_date, DATE(CURRENT_DATE())) >= date_sub(date(CURRENT_DATE()), interval 31 day)\n    \n),\ndays as (\n  -- Expand to daily grain and collapse concurrent subscriptions\n  select distinct\n    w.customer_id,\n    d as activity_date\n  from win w,\n  unnest(\n  generate_date_array(\n    \n      greatest(\n        w.start_date,\n        date_sub(date(CURRENT_DATE()),\n                 interval 31 day)\n      )\n    ,\n    w.end_date\n\t)\n  ) as d\n),\n\n-- Join to separate dimensions (1:1 per customer)\n-- Inner join used here as the sample data is missing taxonomy/country for some customers\n\njoined as (\n  select\n    d.activity_date,\n    d.customer_id,\n    cc.customer_country,\n    ct.taxonomy_business_category_group\n  from days d\n  JOIN `manuel-demo-1392926998`.`analytics`.`dim_customer_country`  cc using (customer_id)\n  JOIN `manuel-demo-1392926998`.`analytics`.`dim_acquisition_taxonomy` ct using (customer_id)\n)\n\n\n, existing as (\n  -- Preserve created_at for already-present rows in the incremental window\n  select customer_id,  activity_date, created_at\n  from `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`\n  where activity_date >= date_sub(date(CURRENT_DATE()), interval 31 day)\n)\n\n\nselect\n  j.activity_date,\n  j.customer_id,\n  1 as is_active,\n  j.customer_country,\n  j.taxonomy_business_category_group,\n  \n    coalesce(e.created_at, CURRENT_TIMESTAMP()) as created_at,\n  \n  CURRENT_TIMESTAMP() as last_updated_at\nfrom joined j\n\nleft join existing e\n  on e.customer_id = j.customer_id\n and e.activity_date = j.activity_date\nwhere j.activity_date >= date_sub(date(CURRENT_DATE()), interval 31 day)\n", "relation_name": "`manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.941512Z", "completed_at": "2025-09-05T23:03:01.947923Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.949736Z", "completed_at": "2025-09-05T23:03:01.949742Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02712559700012207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_dim_acquisition_taxonomy_customer_id.dfa9c26337", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `manuel-demo-1392926998`.`analytics`.`dim_acquisition_taxonomy`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.951762Z", "completed_at": "2025-09-05T23:03:01.964000Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.964791Z", "completed_at": "2025-09-05T23:03:01.964801Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020180940628051758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.unique_dim_acquisition_taxonomy_customer_id.d3bc240ae6", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `manuel-demo-1392926998`.`analytics`.`dim_acquisition_taxonomy`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.956012Z", "completed_at": "2025-09-05T23:03:01.965173Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.969200Z", "completed_at": "2025-09-05T23:03:01.969209Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020135879516601562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_dim_customer_cohort_cohort_date___DATE_current_date_sql_.20e1ce8e0d", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`\n\nwhere not(cohort_date <=DATE(CURRENT_DATE()))\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.960280Z", "completed_at": "2025-09-05T23:03:01.969573Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.970928Z", "completed_at": "2025-09-05T23:03:01.970934Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017357826232910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_dim_customer_cohort_cohort_month___DATE_TRUNC_cohort_date_MONTH_.678a29d6df", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`\n\nwhere not(cohort_month = DATE_TRUNC(cohort_date, MONTH))\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.965483Z", "completed_at": "2025-09-05T23:03:01.971508Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.973214Z", "completed_at": "2025-09-05T23:03:01.973220Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0178070068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_dim_customer_cohort_cohort_date.f315581516", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cohort_date\nfrom `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`\nwhere cohort_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.974141Z", "completed_at": "2025-09-05T23:03:01.985393Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.986172Z", "completed_at": "2025-09-05T23:03:01.986180Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0184476375579834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_dim_customer_cohort_cohort_month.3100b622be", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cohort_month\nfrom `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`\nwhere cohort_month is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.979206Z", "completed_at": "2025-09-05T23:03:01.989099Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.990190Z", "completed_at": "2025-09-05T23:03:01.990196Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017472505569458008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_dim_customer_cohort_customer_country.3e1304b8b5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_country\nfrom `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`\nwhere customer_country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.982641Z", "completed_at": "2025-09-05T23:03:01.991467Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.992818Z", "completed_at": "2025-09-05T23:03:01.992825Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01565074920654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_dim_customer_cohort_customer_id.c7d8063edb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.986533Z", "completed_at": "2025-09-05T23:03:01.992475Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:01.993684Z", "completed_at": "2025-09-05T23:03:01.993689Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01642918586730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.unique_dim_customer_cohort_customer_id.0f77d07867", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.994544Z", "completed_at": "2025-09-05T23:03:02.006104Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.007128Z", "completed_at": "2025-09-05T23:03:02.007134Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025632143020629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.fct_cohort_retention_daily", "compiled": true, "compiled_code": "-- ========================================================================================\n-- MODEL: fct_cohort_retention_daily\n-- PURPOSE:\n--   Long-format daily retention counts by cohort and slices:\n--   (cohort_date, days_since_cohort, customer_country, taxonomy_business_category_group)\n--   \u2192 active_customers, with per-slice cohort_size.\n--\n-- GRAIN:\n--   1 row per (cohort_date, days_since_cohort, customer_country, taxonomy_business_category_group).\n--\n-- OUTPUT COLUMNS:\n--   - cohort_date\n--   - days_since_cohort\n--   - customer_country\n--   - taxonomy_business_category_group\n--   - cohort_size                 -- per-slice cohort size from dim_customer_cohort\n--   - active_customers            -- distinct customers active on cohort_date + days_since_cohort\n--\n-- INPUTS:\n--   - fct_customer_active_daily(customer_id, activity_date, customer_country, taxonomy_business_category_group)\n--   - dim_customer_cohort(customer_id, cohort_date, customer_country, taxonomy_business_category_group)\n--\n-- BUSINESS LOGIC:\n--   - Join daily activity to each customer's cohort_date, keep rows where activity_date >= cohort_date.\n--   - active_customers: COUNT(DISTINCT customer_id) per (cohort_date, t=days_since_cohort, slices).\n--   - cohort_size: COUNT(DISTINCT customer_id) per (cohort_date, slices) from dim_customer_cohort.\n--\n-- ASSUMPTIONS:\n--   - Each customer appears once in dim_customer_cohort; slice attributes are stable there.\n--   - We assume that every activity is asssociated with a subscription.\n--\t - We count customer as active despite any period of inactivity between two active days.\n--\n-- PERFORMANCE:\n--   - Materialized as TABLE, partitioned by cohort_date and clustered by\n--     customer_country, taxonomy_business_category_group, days_since_cohort for pruning.\n--   - Consider require_partition_filter=true to prevent accidental full scans.\n--\n-- DATA QUALITY:\n--   - Uniqueness at declared grain.\n--   - cohort_size is non-null; 0 \u2264 active_customers \u2264 cohort_size; days_since_cohort \u2265 0.\n-- ========================================================================================\n\n\n\nwith base as (\n  select\n    f.customer_id,\n    f.activity_date,\n    d.cohort_date,\n    f.customer_country,\n    f.taxonomy_business_category_group\n  from `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily` f\n  join `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort` d using (customer_id)\n),\nc_size as (\n  select\n    cohort_date,\n    customer_country,\n    taxonomy_business_category_group,\n    count(distinct customer_id) as cohort_size\n  from `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`\n  group by 1,2,3\n),\nprep as (\n  select\n    cohort_date,\n    date_diff(activity_date, cohort_date, day) as days_since_cohort,\n    customer_country,\n    taxonomy_business_category_group,\n    count(distinct customer_id) as active_customers\n  from base\n  where activity_date >= cohort_date\n  group by 1,2,3,4\n)\nselect\n  p.cohort_date,\n  p.days_since_cohort,\n  p.customer_country,\n  p.taxonomy_business_category_group,\n  c.cohort_size,\n  p.active_customers\nfrom prep p\n\tJOIN c_size c USING (cohort_date, customer_country, taxonomy_business_category_group)", "relation_name": "`manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:01.999622Z", "completed_at": "2025-09-05T23:03:02.007445Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.018019Z", "completed_at": "2025-09-05T23:03:02.018027Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025696754455566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.fct_customer_active_monthly", "compiled": true, "compiled_code": "-- ========================================================================================\n-- MODEL: fct_customer_active_monthly\n-- PURPOSE:\n--   Monthly rollup of subscription-level activity. One row per\n--   (customer_id, month_start) with:\n--     - active_days = SUM(is_active) across the month (count of active days)\n--     - is_active_month   = 1 if any day in the month is active\n--   Stable slicing dims are carried through for convenience.\n--\n-- GRAIN:\n--   1 row per (customer_id, month_start).\n--\n-- OUTPUT COLUMNS:\n--   - month_start                       -- DATE_TRUNC(activity_date, MONTH)\n--   - customer_id\n--   - active_days                    -- SUM of daily is_active (0..31)\n--   - is_active_month                      -- 1 if active_days > 0 else 0\n--   - customer_country\n--   - taxonomy_business_category_group\n--   - created_at\n--   - last_updated_at\n--\n-- INPUTS:\n--   - fct_customer_active_daily(customer_id, activity_date,\n--       is_active, customer_country, taxonomy_business_category_group)\n--\n-- BUSINESS LOGIC:\n--   - month_start = DATE_TRUNC(activity_date, MONTH).\n--   - active_days = SUM(is_active) per (customer_id, month_start).\n--   - is_active_month   = CASE WHEN active_days > 0 THEN 1 ELSE 0 END.\n--\n-- PERFORMANCE:\n--   - Partition by month_start; cluster by (customer_id).\n--   - Incremental INSERT OVERWRITE replaces only recent partitions (via lower bound).\n--   - require_partition_filter=true to prevent accidental full scans.\n--\n-- DATA QUALITY:\n--   - Uniqueness at the declared grain.\n--   - active_days between 0 and 31; is_active_month \u2208 {0,1}.\n-- ========================================================================================\n\n\n\nwith bounds as (\n  select\n    date(CURRENT_DATE()) as as_of,\n    date_sub(date(CURRENT_DATE()),\n             interval 31 day) as lower_bound\n),\nbase as (\n  select\n    DATE_TRUNC(f.activity_date, MONTH) as month_start,\n    f.customer_id,\n    f.is_active,\n    f.customer_country,\n    f.taxonomy_business_category_group\n  from `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily` f\n  where 1=1\n  \n    and f.activity_date >= (select lower_bound from bounds)\n  \n),\nagg as (\n  select\n    month_start,\n    customer_id,\n    sum(is_active) as active_days,\n    any_value(customer_country) as customer_country,\n    any_value(taxonomy_business_category_group) as taxonomy_business_category_group\n  from base\n  group by 1,2\n)\n\n\n, existing as (\n  select customer_id, month_start, created_at\n  from `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\n  where month_start >= DATE_TRUNC((select lower_bound from bounds), MONTH)\n)\n\n\nselect\n  a.month_start,\n  a.customer_id,\n  a.active_days,\n  case when a.active_days > 0 then 1 else 0 end as is_active_month,\n  a.customer_country,\n  a.taxonomy_business_category_group,\n  \n    coalesce(e.created_at, CURRENT_TIMESTAMP()) as created_at,\n  \n  CURRENT_TIMESTAMP() as last_updated_at\nfrom agg a\n\nleft join existing e\n  on e.customer_id = a.customer_id\n and e.month_start = a.month_start\nwhere a.month_start >= DATE_TRUNC((select lower_bound from bounds), MONTH)\n", "relation_name": "`manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.009877Z", "completed_at": "2025-09-05T23:03:02.020368Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.021726Z", "completed_at": "2025-09-05T23:03:02.021732Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02521681785583496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_customer_active_daily_activity_date___DATE_current_date_sql_.ee65e9cc0a", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`\n\nwhere not(activity_date <= DATE(CURRENT_DATE()))\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.013504Z", "completed_at": "2025-09-05T23:03:02.020661Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.022016Z", "completed_at": "2025-09-05T23:03:02.022021Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02533745765686035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_customer_active_daily_is_active___1.9a5619d169", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`\n\nwhere not(is_active = 1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.022345Z", "completed_at": "2025-09-05T23:03:02.035676Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.036744Z", "completed_at": "2025-09-05T23:03:02.036750Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018596410751342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_unique_combination_of_columns_fct_customer_active_daily_customer_id__activity_date.737889ea61", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, activity_date\n    from `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`\n    group by customer_id, activity_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.031750Z", "completed_at": "2025-09-05T23:03:02.037331Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.041758Z", "completed_at": "2025-09-05T23:03:02.041766Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.024359464645385742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_active_daily_activity_date.8017f74785", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect activity_date\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`\nwhere activity_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.042127Z", "completed_at": "2025-09-05T23:03:02.050233Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.051339Z", "completed_at": "2025-09-05T23:03:02.051347Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01860666275024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_active_daily_customer_country.3969b34daa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_country\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`\nwhere customer_country is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.038718Z", "completed_at": "2025-09-05T23:03:02.050576Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.051700Z", "completed_at": "2025-09-05T23:03:02.051706Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02010798454284668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_active_daily_created_at.b9a31ba0cb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`\nwhere created_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.047633Z", "completed_at": "2025-09-05T23:03:02.055600Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.056965Z", "completed_at": "2025-09-05T23:03:02.056972Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012018442153930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_active_daily_customer_id.4c05935763", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.052035Z", "completed_at": "2025-09-05T23:03:02.057952Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.059399Z", "completed_at": "2025-09-05T23:03:02.059405Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016503334045410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_active_daily_last_updated_at.b534b6ed35", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect last_updated_at\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`\nwhere last_updated_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.060265Z", "completed_at": "2025-09-05T23:03:02.069657Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.073833Z", "completed_at": "2025-09-05T23:03:02.073840Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020366430282592773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.relationships_fct_customer_active_daily_customer_id__customer_id__ref_dim_customer_country_.cc09ac517c", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from `manuel-demo-1392926998`.`analytics`.`fct_customer_active_daily`\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from `manuel-demo-1392926998`.`analytics`.`dim_customer_country`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.064705Z", "completed_at": "2025-09-05T23:03:02.074195Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.078496Z", "completed_at": "2025-09-05T23:03:02.078502Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020923137664794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_cohort_retention_daily_active_customers__between_0_and_cohort_size.0a3e37d71d", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_daily`\n\nwhere not(active_customers between 0 and cohort_size)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.070043Z", "completed_at": "2025-09-05T23:03:02.079199Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.080502Z", "completed_at": "2025-09-05T23:03:02.080508Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01752924919128418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_cohort_retention_daily_cohort_size___0.a3d0060dfc", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_daily`\n\nwhere not(cohort_size >= 0)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.074641Z", "completed_at": "2025-09-05T23:03:02.080797Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.082311Z", "completed_at": "2025-09-05T23:03:02.082316Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018671751022338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_cohort_retention_daily_days_since_cohort___0.3ce01c4bcf", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_daily`\n\nwhere not(days_since_cohort >= 0)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.082892Z", "completed_at": "2025-09-05T23:03:02.093090Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.096445Z", "completed_at": "2025-09-05T23:03:02.096452Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01995706558227539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_unique_combination_of_columns_fct_cohort_retention_daily_cohort_date__days_since_cohort__customer_country__taxonomy_business_category_group.dd823b7c05", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        cohort_date, days_since_cohort, customer_country, taxonomy_business_category_group\n    from `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_daily`\n    group by cohort_date, days_since_cohort, customer_country, taxonomy_business_category_group\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.089817Z", "completed_at": "2025-09-05T23:03:02.099654Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.100775Z", "completed_at": "2025-09-05T23:03:02.100782Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019420623779296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_cohort_retention_daily_active_customers.b22f21f9a5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect active_customers\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_daily`\nwhere active_customers is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.093513Z", "completed_at": "2025-09-05T23:03:02.101115Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.102710Z", "completed_at": "2025-09-05T23:03:02.102717Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015228271484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_cohort_retention_daily_cohort_date.4f00a1d657", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cohort_date\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_daily`\nwhere cohort_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.096877Z", "completed_at": "2025-09-05T23:03:02.102429Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.103645Z", "completed_at": "2025-09-05T23:03:02.103661Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012476921081542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_cohort_retention_daily_cohort_size.47034b3c8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cohort_size\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_daily`\nwhere cohort_size is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.106109Z", "completed_at": "2025-09-05T23:03:02.114582Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.121852Z", "completed_at": "2025-09-05T23:03:02.121860Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01998114585876465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_cohort_retention_daily_days_since_cohort.3dfa3cce78", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect days_since_cohort\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_daily`\nwhere days_since_cohort is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.110101Z", "completed_at": "2025-09-05T23:03:02.122294Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.123428Z", "completed_at": "2025-09-05T23:03:02.123433Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019560575485229492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.fct_cohort_retention_monthly", "compiled": true, "compiled_code": "-- ========================================================================================\n-- MODEL: fct_cohort_retention_monthly\n-- PURPOSE:\n--   Monthly retention counts by cohort and slices using the monthly rollup:\n--   (cohort_month, months_since_cohort, customer_country, taxonomy_business_category_group)\n--   \u2192 active_customers, with per-slice cohort_size.\n--\n-- GRAIN:\n--   1 row per (cohort_month, months_since_cohort, customer_country, taxonomy_business_category_group).\n--\n-- OUTPUT COLUMNS:\n--   - cohort_month\n--   - months_since_cohort\n--   - customer_country\n--   - taxonomy_business_category_group\n--   - cohort_size                 -- per-slice cohort size from dim_customer_cohort\n--   - active_customers            -- distinct customers active in that month_since_cohort\n--   - total_active_days\t\t   -- total active days of customers in this cohort on grain level.\n--\n-- INPUTS:\n--   - fct_customer_active_monthly(customer_id, month_start, is_active_month,\n--       customer_country, taxonomy_business_category_group)\n--   - dim_customer_cohort(customer_id, cohort_month, customer_country, taxonomy_business_category_group)\n--\n-- BUSINESS LOGIC:\n--   - month_start = month_start from fct_customer_active_monthly.\n--   - Aggregate to customer-month with MAX(is_active_month) across subscriptions.\n--   - months_since_cohort = DATE_DIFF(month_start, cohort_month, MONTH).\n--   - Keep rows where month_start >= cohort_month; count DISTINCT customer_id per\n--     (cohort_month, months_since_cohort, customer_country, taxonomy_business_category_group).\n--   - Join per-slice cohort_size from dim_customer_cohort on (cohort_month, country, taxonomy).\n--\n-- ASSUMPTIONS:\n--   - Each customer appears once in dim_customer_cohort; slice attributes are stable there.\n--   - months_since_cohort \u2265 0 (pre-cohort activity is excluded).\n--\n-- PERFORMANCE:\n--   - Materialized as TABLE; partitioned by cohort_month; clustered by\n--     customer_country, taxonomy_business_category_group, months_since_cohort.\n--   - require_partition_filter=true to avoid accidental full scans.\n--\n-- DATA QUALITY:\n--   - Uniqueness at declared grain.\n--   - 0 \u2264 active_customers; months_since_cohort \u2265 0; cohort_size \u2265 0.\n-- ========================================================================================\n\n\n\n-- 1) Bring in monthly rollup and attach cohort month\nwith base as (\n  select\n    m.customer_id,\n    m.month_start,\n    d.cohort_month,\n    m.is_active_month,\n    m.customer_country,\n    m.taxonomy_business_category_group,\n\tMAX(m.active_days) AS active_days\n  from `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly` m\n  join `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort` d using (customer_id)\n  group by 1,2,3,4,5,6\n),\n\n-- 2) Per-slice cohort sizes (denominator)\nc_size as (\n  select\n    cohort_month,\n    customer_country,\n    taxonomy_business_category_group,\n    count(distinct customer_id) as cohort_size\n  from `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`\n  group by 1,2,3\n),\n\n-- 3) Retained customers per months-since-cohort and slice\nprep as (\n  select\n    cohort_month,\n    date_diff(month_start, cohort_month, month) as months_since_cohort,\n    customer_country,\n    taxonomy_business_category_group,\n    count(distinct customer_id) as active_customers,\n\tSUM(active_days) as total_active_days\n  from base\n  where month_start >= cohort_month\n    and is_active_month = 1\n  group by 1,2,3,4\n)\n\n-- 4) Final output\nselect\n  p.cohort_month,\n  p.months_since_cohort,\n  p.customer_country,\n  p.taxonomy_business_category_group,\n  c.cohort_size,\n  p.active_customers,\n  p.total_active_days\nfrom prep p\njoin c_size c\n  using (cohort_month, customer_country, taxonomy_business_category_group)", "relation_name": "`manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_monthly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.114944Z", "completed_at": "2025-09-05T23:03:02.124832Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.126258Z", "completed_at": "2025-09-05T23:03:02.126265Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01805567741394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.manuel_demo.fct_customer_base_updates_monthly", "compiled": true, "compiled_code": "-- ========================================================================================\n-- MODEL: fct_customer_base_updates_monthly\n-- PURPOSE:\n--   Monthly customer movement metrics:\n--     - new_customers:     customers whose cohort_month equals the month\n--     - retained_customers:active in the month but did NOT start that month\n--     - churned_customers: customers whose last_activity_month equals the month\n--\n-- GRAIN:\n--   1 row per month_start (DATE, first day of month).\n--\n-- OUTPUT COLUMNS:\n--   - month            -- DATE_TRUNC(..., MONTH)\n--   - new_customers\n--   - retained_customers\n--   - churned_customers\n--\n-- INPUTS:\n--   - dim_customer_cohort(customer_id, cohort_month, last_activity_month)\n--   - fct_customer_active_monthly(customer_id, month_start, is_active_month)\n--\n-- NOTES:\n--   - Categories are not mutually exclusive: churned_customers were also active\n--     in that month (their final month). retained_customers = active - new.\n--   - Bounded by a lookback window for performance. Override with vars as needed.\n-- ========================================================================================\n\n\n\n\n\nwith\n-- New customers = first-time starters in the month\nnew_by_month as (\n  select\n    cohort_month as month,\n    count(distinct customer_id) as new_customers\n  from `manuel-demo-1392926998`.`analytics`.`dim_customer_cohort`\n  group by 1\n),\n\n-- Churned customers = last activity falls in the month\nchurned_by_month as (\n  select\n    last_activity_month as month,\n    count(distinct customer_id) as churned_customers\n  from\n\t(SELECT\n\t\tcustomer_id,\n\t\tmax(month_start) as last_activity_month\n\tfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\n\tgroup by 1)\n  group by 1\n),\n\n-- Active customers in the month (customer-level, across all subscriptions)\nactive_by_month as (\n  select\n    month_start as month,\n    count(distinct customer_id) as active_customers\n    from `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\n  group by 1\n),\n\n-- Months present in any component\nmonths as (\n  select month from new_by_month\n  union distinct\n  select month from churned_by_month\n  union distinct\n  select month from active_by_month\n)\n\nselect\n  m.month,\n  coalesce(n.new_customers, 0) as new_customers,\n  greatest(coalesce(a.active_customers, 0) - coalesce(n.new_customers, 0), 0) as retained_customers,\n  coalesce(c.churned_customers, 0) as churned_customers\nfrom months m\nleft join new_by_month     n using (month)\nleft join active_by_month  a using (month)\nleft join churned_by_month c using (month)", "relation_name": "`manuel-demo-1392926998`.`analytics`.`fct_customer_base_updates_monthly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.118284Z", "completed_at": "2025-09-05T23:03:02.125904Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.127267Z", "completed_at": "2025-09-05T23:03:02.127273Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018428325653076172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_customer_active_monthly_active_days__between_0_and_31.dbe0af9f00", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\n\nwhere not(active_days between 0 and 31)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.128164Z", "completed_at": "2025-09-05T23:03:02.137683Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.142917Z", "completed_at": "2025-09-05T23:03:02.142927Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02153325080871582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_customer_active_monthly_is_active_month___1.1b88fa276e", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\n\nwhere not(is_active_month = 1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.133003Z", "completed_at": "2025-09-05T23:03:02.143291Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.147252Z", "completed_at": "2025-09-05T23:03:02.147260Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02124476432800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_unique_combination_of_columns_fct_customer_active_monthly_customer_id__month_start.ec0267d4dd", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, month_start\n    from `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\n    group by customer_id, month_start\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.138257Z", "completed_at": "2025-09-05T23:03:02.148695Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.150052Z", "completed_at": "2025-09-05T23:03:02.150060Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01485443115234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_active_monthly_created_at.525b7fe404", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\nwhere created_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.143645Z", "completed_at": "2025-09-05T23:03:02.149676Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.151028Z", "completed_at": "2025-09-05T23:03:02.151033Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.16515898704528809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_active_monthly_customer_id.86288c087b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.151908Z", "completed_at": "2025-09-05T23:03:02.303685Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.305211Z", "completed_at": "2025-09-05T23:03:02.305218Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1610558032989502, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_active_monthly_last_updated_at.d858a6d120", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect last_updated_at\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\nwhere last_updated_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.298346Z", "completed_at": "2025-09-05T23:03:02.304497Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.309149Z", "completed_at": "2025-09-05T23:03:02.309157Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.16010713577270508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_active_monthly_month_start.a629889df7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month_start\nfrom `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\nwhere month_start is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.305548Z", "completed_at": "2025-09-05T23:03:02.315003Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.316012Z", "completed_at": "2025-09-05T23:03:02.316018Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014394998550415039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.relationships_fct_customer_active_monthly_customer_id__customer_id__ref_dim_customer_country_.ca7c254974", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from `manuel-demo-1392926998`.`analytics`.`fct_customer_active_monthly`\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from `manuel-demo-1392926998`.`analytics`.`dim_customer_country`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.311252Z", "completed_at": "2025-09-05T23:03:02.316854Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.323940Z", "completed_at": "2025-09-05T23:03:02.323948Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02025437355041504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_cohort_retention_monthly_active_customers__between_0_and_cohort_size.f3c2023e80", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_monthly`\n\nwhere not(active_customers between 0 and cohort_size)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.320749Z", "completed_at": "2025-09-05T23:03:02.326901Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.331946Z", "completed_at": "2025-09-05T23:03:02.331953Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019733905792236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_cohort_retention_monthly_months_since_cohort___0.666a949447", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_monthly`\n\nwhere not(months_since_cohort >= 0)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.317723Z", "completed_at": "2025-09-05T23:03:02.327197Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.332303Z", "completed_at": "2025-09-05T23:03:02.332309Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020752668380737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_cohort_retention_monthly_cohort_size___0.77311a4043", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_monthly`\n\nwhere not(cohort_size >= 0)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.327530Z", "completed_at": "2025-09-05T23:03:02.337828Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.339030Z", "completed_at": "2025-09-05T23:03:02.339037Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014917850494384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_unique_combination_of_columns_fct_cohort_retention_monthly_cohort_month__months_since_cohort__customer_country__taxonomy_business_category_group.b044124323", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        cohort_month, months_since_cohort, customer_country, taxonomy_business_category_group\n    from `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_monthly`\n    group by cohort_month, months_since_cohort, customer_country, taxonomy_business_category_group\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.332733Z", "completed_at": "2025-09-05T23:03:02.338447Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.339612Z", "completed_at": "2025-09-05T23:03:02.339618Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017476797103881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_cohort_retention_monthly_active_customers.a05f2d3151", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect active_customers\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_monthly`\nwhere active_customers is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.341035Z", "completed_at": "2025-09-05T23:03:02.349098Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.350005Z", "completed_at": "2025-09-05T23:03:02.350012Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01944708824157715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_cohort_retention_monthly_cohort_month.80af4ecfd6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cohort_month\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_monthly`\nwhere cohort_month is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.344561Z", "completed_at": "2025-09-05T23:03:02.350311Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.358124Z", "completed_at": "2025-09-05T23:03:02.358134Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020502328872680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_cohort_retention_monthly_cohort_size.bae940e2f3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cohort_size\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_monthly`\nwhere cohort_size is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.350673Z", "completed_at": "2025-09-05T23:03:02.360186Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.361386Z", "completed_at": "2025-09-05T23:03:02.361392Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01735234260559082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_cohort_retention_monthly_months_since_cohort.1711a1553a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect months_since_cohort\nfrom `manuel-demo-1392926998`.`analytics`.`fct_cohort_retention_monthly`\nwhere months_since_cohort is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.353547Z", "completed_at": "2025-09-05T23:03:02.360493Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.361674Z", "completed_at": "2025-09-05T23:03:02.361680Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017752647399902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_customer_base_updates_monthly_churned_customers___new_customers_retained_customers.2537d5c520", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from `manuel-demo-1392926998`.`analytics`.`fct_customer_base_updates_monthly` where month >= DATE_SUB(CURRENT_DATE(), INTERVAL 9000 DAY)) dbt_subquery\n\nwhere not(churned_customers  <= new_customers + retained_customers)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.362259Z", "completed_at": "2025-09-05T23:03:02.372000Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.372970Z", "completed_at": "2025-09-05T23:03:02.372978Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019894838333129883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_customer_base_updates_monthly_month___DATE_TRUNC_CURRENT_DATE_MONTH_.fabfc7eabd", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from `manuel-demo-1392926998`.`analytics`.`fct_customer_base_updates_monthly` where month >= DATE_SUB(CURRENT_DATE(), INTERVAL 9000 DAY)) dbt_subquery\n\nwhere not(month <= DATE_TRUNC(CURRENT_DATE(), MONTH))\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.368111Z", "completed_at": "2025-09-05T23:03:02.380243Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.381035Z", "completed_at": "2025-09-05T23:03:02.381043Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01993107795715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_customer_base_updates_monthly_new_customers___0.2f27cc8380", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from `manuel-demo-1392926998`.`analytics`.`fct_customer_base_updates_monthly` where month >= DATE_SUB(CURRENT_DATE(), INTERVAL 9000 DAY)) dbt_subquery\n\nwhere not(new_customers >= 0)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.376262Z", "completed_at": "2025-09-05T23:03:02.382586Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.386318Z", "completed_at": "2025-09-05T23:03:02.386326Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016054630279541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_base_updates_monthly_month.da0c4b84b9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom (select * from `manuel-demo-1392926998`.`analytics`.`fct_customer_base_updates_monthly` where month >= DATE_SUB(CURRENT_DATE(), INTERVAL 9000 DAY)) dbt_subquery\nwhere month is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.373299Z", "completed_at": "2025-09-05T23:03:02.382815Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.386764Z", "completed_at": "2025-09-05T23:03:02.386771Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01698780059814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.dbt_utils_expression_is_true_fct_customer_base_updates_monthly_retained_customers___0.3e0010577c", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from `manuel-demo-1392926998`.`analytics`.`fct_customer_base_updates_monthly` where month >= DATE_SUB(CURRENT_DATE(), INTERVAL 9000 DAY)) dbt_subquery\n\nwhere not(retained_customers >= 0)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.383472Z", "completed_at": "2025-09-05T23:03:02.389566Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.393374Z", "completed_at": "2025-09-05T23:03:02.393382Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012909412384033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_base_updates_monthly_new_customers.09dcfdc0b8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect new_customers\nfrom (select * from `manuel-demo-1392926998`.`analytics`.`fct_customer_base_updates_monthly` where month >= DATE_SUB(CURRENT_DATE(), INTERVAL 9000 DAY)) dbt_subquery\nwhere new_customers is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.389907Z", "completed_at": "2025-09-05T23:03:02.397519Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.397997Z", "completed_at": "2025-09-05T23:03:02.398004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011391639709472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.not_null_fct_customer_base_updates_monthly_retained_customers.b9f1808526", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect retained_customers\nfrom (select * from `manuel-demo-1392926998`.`analytics`.`fct_customer_base_updates_monthly` where month >= DATE_SUB(CURRENT_DATE(), INTERVAL 9000 DAY)) dbt_subquery\nwhere retained_customers is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-05T23:03:02.394808Z", "completed_at": "2025-09-05T23:03:02.399118Z"}, {"name": "execute", "started_at": "2025-09-05T23:03:02.399425Z", "completed_at": "2025-09-05T23:03:02.399430Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006828784942626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.manuel_demo.unique_fct_customer_base_updates_monthly_month.2371bd72cd", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select month as unique_field\n  from (select * from `manuel-demo-1392926998`.`analytics`.`fct_customer_base_updates_monthly` where month >= DATE_SUB(CURRENT_DATE(), INTERVAL 9000 DAY)) dbt_subquery\n  where month is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 6.734379053115845, "args": {"favor_state": false, "log_path": "C:\\Users\\peter\\manuel_demo\\logs", "static": false, "log_level_file": "debug", "macro_debugging": false, "compile": true, "require_all_warnings_handled_by_warn_error": false, "use_colors_file": true, "partial_parse_file_diff": true, "send_anonymous_usage_stats": true, "project_dir": "C:\\Users\\peter\\manuel_demo", "cache_selected_only": false, "introspect": true, "require_batched_execution_for_custom_microbatch_strategy": false, "use_colors": true, "use_fast_test_edges": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "which": "generate", "validate_macro_args": false, "empty_catalog": false, "log_format_file": "debug", "exclude": [], "indirect_selection": "eager", "state_modified_compare_more_unrendered_values": false, "vars": {}, "print": true, "log_file_max_bytes": 10485760, "printer_width": 80, "profiles_dir": "C:\\Users\\peter\\.dbt", "strict_mode": false, "quiet": false, "state_modified_compare_vars": false, "partial_parse": true, "require_resource_names_without_spaces": true, "defer": false, "show_resource_report": false, "show_all_deprecations": false, "static_parser": true, "version_check": true, "invocation_command": "dbt docs generate", "populate_cache": true, "log_level": "info", "require_yaml_configuration_for_mf_time_spines": false, "require_nested_cumulative_type_params": false, "log_format": "default", "source_freshness_run_project_hooks": true, "select": [], "upload_to_artifacts_ingest_api": false, "require_generic_test_arguments_property": true, "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "skip_nodes_if_on_run_start_fails": false}}